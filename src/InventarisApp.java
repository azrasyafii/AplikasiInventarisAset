
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.io.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;



public class InventarisApp extends javax.swing.JFrame {

    /**
     * Creates new form InventarisApp
     */
    public InventarisApp() {
        initComponents();
        loadTableData(); // Panggil metode untuk memuat data dari database
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtIdBarang = new javax.swing.JTextField();
        txtNamaBarang = new javax.swing.JTextField();
        txtStok = new javax.swing.JTextField();
        txtKondisi = new javax.swing.JTextField();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableBarangMasuk = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableBarangKeluar = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInventaris = new javax.swing.JTable();
        cmbLaporan = new javax.swing.JComboBox<>();

        jLabel1.setText("jLabel1");

        jLabel7.setText("jLabel7");

        jTextField5.setText("jTextField5");

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("APLIKASI INVENTARIS ASET");
        jPanel1.add(jLabel2);

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("ID BARANG");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("NAMA BARANG");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("STOK BARANG");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("KONDISI");

        btnTambah.setBackground(new java.awt.Color(0, 255, 255));
        btnTambah.setText("TAMBAH");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnUbah.setBackground(new java.awt.Color(51, 255, 255));
        btnUbah.setText("UBAH");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(0, 255, 255));
        btnHapus.setText("HAPUS");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKeluar.setBackground(new java.awt.Color(255, 51, 51));
        btnKeluar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnKeluar.setText("KELUAR");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });

        btnImport.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnImport.setText("IMPORT");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnExport.setText("EXPORT");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("TABLE BARANG MASUK");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("INPUT DATA BARANG");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("KATEGORI BARANG");

        cmbKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BARANG MASUK", "BARANG KELUAR" }));

        tableBarangMasuk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID BARANG", "NAMA BARANG", "STOK BARANG", "KONDISI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableBarangMasuk);

        tableBarangKeluar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID BARANG ", "NAMA BARANG", "STOK BARANG", "KONDISI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableBarangKeluar);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("TABLE BARANG KELUAR");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("TABLE STOK BARANG");

        tableInventaris.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID BARANG", "NAMA BARANG", "STOK BARANG", "KONDISI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInventaris.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableInventaris.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInventarisMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableInventaris);

        cmbLaporan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LAPORAN STOK BARANG", "LAPORAN BARANG MASUK", "LAPORAN BARANG KELUAR" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(btnImport)
                .addGap(480, 480, 480)
                .addComponent(cmbLaporan, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnExport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(171, 171, 171))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(189, 189, 189)
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addGap(17, 17, 17)
                                                        .addComponent(btnTambah))
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6))
                                                .addGap(39, 39, 39))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(65, 65, 65)))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtIdBarang)
                                            .addComponent(txtStok)
                                            .addComponent(txtKondisi)
                                            .addComponent(txtNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(btnUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(44, 44, 44)
                                                .addComponent(btnHapus)
                                                .addGap(48, 48, 48)
                                                .addComponent(btnKeluar))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(8, 8, 8)
                                        .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(2, 2, 2)))
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 33, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(601, 601, 601)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtIdBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtKondisi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTambah)
                            .addComponent(btnHapus)
                            .addComponent(btnKeluar)
                            .addComponent(btnUbah)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport)
                    .addComponent(btnExport)
                    .addComponent(cmbLaporan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(445, 445, 445))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        if (!validateInput()) return;

    String kategori = cmbKategori.getSelectedItem().toString();
    String idBarang = txtIdBarang.getText();
    String namaBarang = txtNamaBarang.getText();
    int stok = Integer.parseInt(txtStok.getText());
    String kondisi = txtKondisi.getText();

    try (Connection conn = DatabaseConnection.getConnection()) {
        if (kategori.equals("BARANG MASUK")) {
            // Insert ke tabel barang_masuk
            String sqlMasuk = "INSERT INTO barang_masuk (id_barang, nama_barang, stok, kondisi) VALUES (?, ?, ?, ?)";
            try (PreparedStatement psMasuk = conn.prepareStatement(sqlMasuk)) {
                psMasuk.setString(1, idBarang);
                psMasuk.setString(2, namaBarang);
                psMasuk.setInt(3, stok);
                psMasuk.setString(4, kondisi);
                psMasuk.executeUpdate();
            }

            // Insert atau update stok_barang
            String sqlStok = "INSERT INTO stok_barang (id_barang, nama_barang, stok, kondisi) " +
                             "VALUES (?, ?, ?, ?) " +
                             "ON DUPLICATE KEY UPDATE stok = stok + VALUES(stok)";
            try (PreparedStatement psStok = conn.prepareStatement(sqlStok)) {
                psStok.setString(1, idBarang);
                psStok.setString(2, namaBarang);
                psStok.setInt(3, stok);
                psStok.setString(4, kondisi);
                psStok.executeUpdate();
            }
        } else if (kategori.equals("BARANG KELUAR")) {
            // Insert ke tabel barang_keluar
            String sqlKeluar = "INSERT INTO barang_keluar (id_barang, nama_barang, stok, kondisi) VALUES (?, ?, ?, ?)";
            try (PreparedStatement psKeluar = conn.prepareStatement(sqlKeluar)) {
                psKeluar.setString(1, idBarang);
                psKeluar.setString(2, namaBarang);
                psKeluar.setInt(3, stok);
                psKeluar.setString(4, kondisi);
                psKeluar.executeUpdate();
            }

            // Update stok_barang untuk mengurangi stok
            String sqlUpdateStok = "UPDATE stok_barang SET stok = stok - ? WHERE id_barang = ?";
            try (PreparedStatement psUpdateStok = conn.prepareStatement(sqlUpdateStok)) {
                psUpdateStok.setInt(1, stok);
                psUpdateStok.setString(2, idBarang);
                int rowsAffected = psUpdateStok.executeUpdate();
                if (rowsAffected == 0) {
                    JOptionPane.showMessageDialog(this, "Barang tidak ditemukan di stok!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        loadTableData(); // Panggil untuk memperbarui tabel
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saat menyimpan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    clearFields();

    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
    // Validasi input
    if (!validateInput()) return;

    // Ambil baris yang dipilih
    int selectedRow = tableInventaris.getSelectedRow();
    if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) tableInventaris.getModel();
        
        // Update data pada baris yang dipilih
        model.setValueAt(txtIdBarang.getText(), selectedRow, 0);  // ID Barang
        model.setValueAt(txtNamaBarang.getText(), selectedRow, 1);  // Nama Barang
        model.setValueAt(txtStok.getText(), selectedRow, 2);  // Stok Barang
        model.setValueAt(txtKondisi.getText(), selectedRow, 3);  // Kondisi Barang
        
        // Bersihkan form setelah proses selesai
        clearFields();
        JOptionPane.showMessageDialog(this, "Data berhasil diubah!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        loadTableData(); // Panggil untuk memperbarui tabel
    } else {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diubah.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
   int selectedRow = tableInventaris.getSelectedRow();
    if (selectedRow >= 0) {
        String idBarang = tableInventaris.getValueAt(selectedRow, 0).toString();

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sqlDelete = "DELETE FROM stok_barang WHERE id_barang = ?";
            try (PreparedStatement psDelete = conn.prepareStatement(sqlDelete)) {
                psDelete.setString(1, idBarang);
                psDelete.executeUpdate();
            }

            DefaultTableModel model = (DefaultTableModel) tableInventaris.getModel();
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            loadTableData(); // Panggil untuk memperbarui tabel
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat menghapus data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus.");
    }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
   String laporanDipilih = cmbLaporan.getSelectedItem().toString(); // Mendapatkan pilihan laporan
    DefaultTableModel model;
    String judulLaporan;

    switch (laporanDipilih) {
        case "LAPORAN STOK BARANG":
            model = (DefaultTableModel) tableInventaris.getModel();
            judulLaporan = "LAPORAN STOK BARANG";
            break;
        case "LAPORAN BARANG MASUK":
            model = (DefaultTableModel) tableBarangMasuk.getModel();
            judulLaporan = "LAPORAN BARANG MASUK";
            break;
        case "LAPORAN BARANG KELUAR":
            model = (DefaultTableModel) tableBarangKeluar.getModel();
            judulLaporan = "LAPORAN BARANG KELUAR";
            break;
        default:
            JOptionPane.showMessageDialog(this, "Pilih jenis laporan yang valid!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
    }

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih Lokasi untuk Menyimpan File");
    fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("PDF File (*.pdf)", "pdf"));

    int userSelection = fileChooser.showSaveDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        try {
            // Membuat dokumen PDF baru
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(fileToSave + ".pdf"));

            // Membuka dokumen untuk ditulis
            document.open();

            // Menambahkan judul laporan
            Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
            Paragraph title = new Paragraph(judulLaporan, titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // Menambahkan jarak
            document.add(new Paragraph("\n"));

            // Menentukan jumlah kolom sesuai tabel yang dipilih
            int columnCount = model.getColumnCount();
            PdfPTable table = new PdfPTable(columnCount);

            // Menambahkan header tabel
            for (int i = 0; i < columnCount; i++) {
                table.addCell(model.getColumnName(i));
            }

            // Menambahkan data ke tabel
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < columnCount; j++) {
                    table.addCell(model.getValueAt(i, j).toString());
                }
            }

            // Menambahkan tabel ke dalam dokumen PDF
            document.add(table);

            // Menutup dokumen
            document.close();

            JOptionPane.showMessageDialog(this, "Laporan berhasil diekspor ke PDF!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (DocumentException | IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal membuat file PDF: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih File untuk Diimpor");
    fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV File (*.csv)", "csv"));

    int userSelection = fileChooser.showOpenDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
            DefaultTableModel model = (DefaultTableModel) tableInventaris.getModel();
            model.setRowCount(0); // Clear existing rows
            String line;
            while ((line = reader.readLine()) != null) {
                String[] rowData = line.split(",");
                if (rowData.length == 4) { // Ensure the CSV has 4 columns
                    model.addRow(rowData);
                } else {
                    JOptionPane.showMessageDialog(this, "Format data tidak valid di file CSV.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Data berhasil diimpor!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saat membaca file: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnImportActionPerformed

    private void tableInventarisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInventarisMouseClicked
         int selectedRow = tableInventaris.getSelectedRow();
    if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) tableInventaris.getModel();
        txtIdBarang.setText(model.getValueAt(selectedRow, 0).toString());
        txtNamaBarang.setText(model.getValueAt(selectedRow, 1).toString());
        txtStok.setText(model.getValueAt(selectedRow, 2).toString());
        txtKondisi.setText(model.getValueAt(selectedRow, 3).toString());
    }
    }//GEN-LAST:event_tableInventarisMouseClicked


   private void clearFields() {
    txtIdBarang.setText("");
    txtNamaBarang.setText("");
    txtStok.setText("");
    txtKondisi.setText("");
    }

   
   private boolean validateInput() {
    if (txtIdBarang.getText().isEmpty() ||
        txtNamaBarang.getText().isEmpty() ||
        txtStok.getText().isEmpty() ||
        txtKondisi.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return false;
    }
    try {
        Integer.parseInt(txtStok.getText()); // Pastikan stok adalah angka
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Stok harus berupa angka!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return false;
    }
    return true;
   }
    
   private void loadTableData() {
    try (Connection conn = DatabaseConnection.getConnection()) {
        DefaultTableModel modelStok = (DefaultTableModel) tableInventaris.getModel();
        DefaultTableModel modelMasuk = (DefaultTableModel) tableBarangMasuk.getModel();
        DefaultTableModel modelKeluar = (DefaultTableModel) tableBarangKeluar.getModel();

        // Bersihkan tabel sebelum memuat ulang
        modelStok.setRowCount(0);
        modelMasuk.setRowCount(0);
        modelKeluar.setRowCount(0);

        // Muat data stok_barang
        String sqlStok = "SELECT * FROM stok_barang";
        try (PreparedStatement psStok = conn.prepareStatement(sqlStok);
             ResultSet rsStok = psStok.executeQuery()) {
            while (rsStok.next()) {
                Object[] row = {
                    rsStok.getString("id_barang"),
                    rsStok.getString("nama_barang"),
                    rsStok.getInt("stok"),
                    rsStok.getString("kondisi")
                };
                modelStok.addRow(row);
            }
        }

        // Muat data barang_masuk
        String sqlMasuk = "SELECT * FROM barang_masuk";
        try (PreparedStatement psMasuk = conn.prepareStatement(sqlMasuk);
             ResultSet rsMasuk = psMasuk.executeQuery()) {
            while (rsMasuk.next()) {
                Object[] row = {
                    rsMasuk.getString("id_barang"),
                    rsMasuk.getString("nama_barang"),
                    rsMasuk.getInt("stok"),
                    rsMasuk.getString("kondisi")
                };
                modelMasuk.addRow(row);
            }
        }

        // Muat data barang_keluar
        String sqlKeluar = "SELECT * FROM barang_keluar";
        try (PreparedStatement psKeluar = conn.prepareStatement(sqlKeluar);
             ResultSet rsKeluar = psKeluar.executeQuery()) {
            while (rsKeluar.next()) {
                Object[] row = {
                    rsKeluar.getString("id_barang"),
                    rsKeluar.getString("nama_barang"),
                    rsKeluar.getInt("stok"),
                    rsKeluar.getString("kondisi")
                };
                modelKeluar.addRow(row);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saat memuat data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventarisApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventarisApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventarisApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventarisApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventarisApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<String> cmbKategori;
    private javax.swing.JComboBox<String> cmbLaporan;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTable tableBarangKeluar;
    private javax.swing.JTable tableBarangMasuk;
    private javax.swing.JTable tableInventaris;
    private javax.swing.JTextField txtIdBarang;
    private javax.swing.JTextField txtKondisi;
    private javax.swing.JTextField txtNamaBarang;
    private javax.swing.JTextField txtStok;
    // End of variables declaration//GEN-END:variables
}
